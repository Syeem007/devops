#!/usr/bin/python
from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import Controller, RemoteController, OVSKernelSwitch, UserSwitch
from mininet.node import Node
from mininet.log import setLogLevel, info
from mininet.cli import CLI
from mininet.link import Link, TCLink
import time
import glob, os


class LinuxRouter(Node):
    def config(self, **params):
        super(LinuxRouter, self).config(**params)
        self.cmd('sysctl net.ipv4.ip_forward=1')

    def terminate(self):
        self.cmd('sysctl net.ipv4.ip_forward=0')
        super(LinuxRouter, self).terminate()



def mytopo():

        net = Mininet( controller=RemoteController, link=TCLink, switch=OVSKernelSwitch )
        # Add 2 routers in two different subnets
        r1 = net.addHost('r1', cls=LinuxRouter, ip='10.0.0.1/24')
        

        c0 = net.addController( 'c0', controller=RemoteController, ip='127.0.0.1', port=6633 )

        # Add 2 switches
        s1 = net.addSwitch('s1')
        
       

        # Add host-switch links in the same subnet
        net.addLink(
                     r1,s1,
                     intfName1='r1-eth0',
                     params1={'ip': '10.0.0.1/24'})

  
        



        # Add router-router link in a new subnet for the router-router connection
        net.addLink(r1,
                     r2,
                     intfName1='r1-eth1',
                     intfName2='r2-eth0',
                     params1={'ip': '1.1.1.1/24'},
                     params2={'ip': '1.1.1.2/24'})

       





        # Adding hosts specifying the default route
        d1 = net.addHost(name='d1',
                          ip='10.0.0.251/24',
                          defaultRoute='via 10.0.0.1')
        



      # Add host-switch links
        net.addLink(d1, s1)
        
        net.build()
        c0.start()
        s1.start( [c0] )
        
        #OVS Filtering
        info(net['r1'].cmd("ifconfig r1-eth0 hw ether 00:00:00:00:01:01"))
        
        info(net['s1'].cmd("ovs-ofctl add-flow s1 priority=1,arp,actions=flood"))
        info(net['s1'].cmd("ovs-ofctl add-flow s1 priority=65535,ip,dl_dst=00:00:00:00:01:01,actions=output:1"))
        info(net['s1'].cmd("ovs-ofctl add-flow s1 priority=10,ip,nw_src=10.0.1.251,nw_dst=10.0.0.251,actions=output:2"))
        info(net['s1'].cmd("ovs-ofctl add-flow s1 priority=10,ip,nw_src=10.0.1.252,nw_dst=10.0.0.252,actions=output:3"))
        
   
        info(net['r1'].cmd("ip route add 2.2.2.0/24  via 1.1.1.2 dev r1-eth1"))
        

        
        
    #Adding subsequent GRE and MPLS links R1,R2
    #Part 1 GRE 

        info(net['r1'].cmd('ip tun a foo1 mode gre remote 8.8.8.1 local 1.1.1.1'))
        
        
 #Part 2 MPLS

        info(net['r1'].cmd('sysctl -w net.ipv4.conf.all.rp_filter=2'))
        

        CLI(net) 
        net.stop()
    # GRE tunnel between R1 and R4
  #  info(net['r1'].cmd('ip tun a foo8 mode gre remote 4.4.4.2 local 1.1.1.1'))
  #  info(net['r1'].cmd('ip addr a 70.70.70.1 dev foo8'))
  #  info(net['r1'].cmd('ip link set foo8 up'))
  #  info(net['r1'].cmd('ip rou a 70.70.70.0/24 dev foo8'))
  #  info(net['r4'].cmd('ip tun a foo8 mode gre remote 1.1.1.1 local 4.4.4.2'))
  #  info(net['r4'].cmd('ip addr a 70.70.70.2 dev foo8'))
  #  info(net['r4'].cmd('ip link set foo8 up'))
  #  info(net['r4'].cmd('ip rou a 70.70.70.0/24 dev foo8'))

    # MPLS kink between R1 and R4

  #  info(net['r1'].cmd('sysctl -w net.ipv4.conf.all.rp_filter=2'))
  #  info(net['r1'].cmd('sysctl -w net.mpls.platform_labels=65535'))
  #  info(net['r1'].cmd('sysctl -w net.mpls.conf.foo8.input=1'))
  #  info(net['r1'].cmd('ip rou c 70.70.70.0/24 encap mpls 600 dev foo8'))
  #  info(net['r1'].cmd('ip -f mpls rou a 601 dev lo'))
  #  info(net['r4'].cmd('sysctl -w net.ipv4.conf.all.rp_filter=2'))
  #  info(net['r4'].cmd('sysctl -w net.mpls.platform_labels=65535'))
  #  info(net['r4'].cmd('sysctl -w net.mpls.conf.foo8.input=1'))        
  #  info(net['r4'].cmd('ip rou c 70.70.70.0/24 encap mpls 601 dev foo8'))
  #  info(net['r4'].cmd('ip -f mpls rou a 600 dev lo'))
       


if __name__ == '__main__':
    setLogLevel('info')
    mytopo()